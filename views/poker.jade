extends ./layout

block content
  div.poker-bg
    div.row.poker-container
      div.poker__table
        div.poker__table-inner
        ul#Community_cards_tmp
          - for(var i=0; i<5; i++)
            li.poker__card.poker__card-community
        ul#Players_tmp
          - for(var i=0; i<6; i++)
            li(class=['poker__player', 'poker__player--empty', 'poker__player--'+i])
              div.poker__card.poker__card-1
              div.poker__card.poker__card-2
              p.poker__player-name Seat Available
              p.poker__player-chips

    div.row
      div.small-6.column
        h1 Table
        h3 Pot
        p#Pot 0
        h3 Players
        ol#Players
          - for(var i=0; i<6; i++)
            li Empty
        h3 Winner
          p#Winner No one
            
      div.small-6.column
        h1#Player
        h3 Chips
          p#Chips
        h3 Community Cards
          p#Community_cards None
        h3 Your Cards
          p#Player_cards None
          button#Check Check
          button#Fold Fold
          button#Bet 10
          input(type="number", value=10, min=10)#Bet_amount
          button#All_in All In

  script(type='text/javascript').
    var socket = io('/poker');
    var playerID;
    var bet = 0;
    var roundBet = 0;
    var call = 0;
    var minBet = 10;

    socket.on('player join', function(player) {
      $playerEl = $('#Players').children().eq(player.seat);
      $playerEl.text(player.name);
      $playerEl.addClass('poker__players--folded');

      var $player = $('#Players_tmp').children().eq(player.seat);
      $player.removeClass('poker__player--empty');
      $player.children('.poker__player-name').text(player.name);
    });

    socket.on('players', function(players) {
      $('#Players').children().each(function(idx) {
        if (players[idx]) {
          $(this).text(players[idx].name);
          var $player = $('#Players_tmp').children().eq(players[idx].seat);
          $player.removeClass('poker__player--empty');
          $player.children('.poker__player-name').text(players[idx].name);

          if (!players[idx].inHand) {
            $(this).addClass('poker__players--folded');
          }
        }
        else{
          $(this).addClass('poker__players--folded');
        }
      });
    });

    socket.on('players in hand', function(data) {
      $.each(data.players, function(id, player) {
        var $playerEl = $('#Players').children().eq(player.seat);
        var $player = $('#Players_tmp').children().eq(player.seat);
        $playerEl.removeClass('poker__players--folded');
        if(player.id == data.dealerID) {
          $playerEl.addClass('poker__players--dealer');
          $player.addClass('poker__player--dealer');
        }
        if(player.id == data.smallBlindID) {
          $playerEl.addClass('poker__players--small-blind');
          $player.addClass('poker__player--small-blind');
        }
        if(player.id == data.bigBlindID) {
          $playerEl.addClass('poker__players--big-blind');
          $player.addClass('poker__player--big-blind');
        }

        if(player.id != playerID) {
          $player.children('.poker__card-1').addClass('poker__card--back');
          $player.children('.poker__card-2').addClass('poker__card--back');
        } else {
          $player.children('.poker__card-1').removeClass('poker__card--back');
          $player.children('.poker__card-2').removeClass('poker__card--back');
        }

        $player.children('.poker__player-chips').text(player.chips);
        if(player.id == playerID) {
          $('#Chips').text(player.chips);
        }
      });

      $('#Pot').text(data.pot);

      if(playerID == data.smallBlindID) {
        bet = data.blind/2;
      }
      else if(playerID == data.bigBlindID) {
        bet = data.blind;
      }

      roundBet = bet;
      var tableBet = data.blind;
      var tableRoundBet = data.blind;
      var minRaise = data.blind;

      //- From 'pot' function (unmodified)
      if(tableBet > bet) {
        call = tableBet - bet;
        $('#Check').text('Call ' + tableBet + " (+" + call + ")");
      }

      minBet = tableRoundBet + minRaise;
      if(tableRoundBet > 0) {
        $('#Bet').addClass('raise');
      }
      else{
        $('#Bet').removeClass('raise');
      }
      updateBetButton(true);
    });

    socket.on('player leave', function(seat) {
      var $playerEl = $('#Players').children().eq(seat);
      $playerEl.text('Empty');
      $playerEl.addClass('poker__players--folded');

      var $player = $('#Players_tmp').children().eq(seat);
      $player.children('.poker__player-name').text('Seat Available');
      $player.addClass('poker__player--folded');
      $player.addClass('poker__player--empty');
    });

    socket.on('player cards', function(cards, seat) {
      $('#Player_cards').text(cards.join(' '));

      var $player = $('#Players_tmp').children().eq(seat);
      $player.children('.poker__card-1').addClass('poker__card poker__card--' + cards[0]);
      $player.children('.poker__card-2').addClass('poker__card poker__card--' + cards[1]);
    });

    socket.on('community cards', function(cards) {
      $('#Community_Cards').text(cards.join(' '));
      $.each(cards, function(idx, card) {
        $('#Community_cards_tmp').children().eq(idx).addClass('poker__card--' + card);
      });

      roundBet = 0;
    });

    socket.on('reset', function() {
      $('#Player_cards').text('None');
      $('#Community_cards').text('None');
      $('#Winner').text('No one');
      $('#Pot').text(0);
      $('#Check').text('Check');
      $('#Bet').removeClass('raise');
      bet = 0;
      roundBet = 0;
      call = 0;
      minBet = 10;
      updateBetButton(true);
      $('button').prop('disabled', true);
      $('#Players').children().removeClass();  // Remove all classes
      $('#Players').children().addClass('poker__players--folded');

      $('.poker__player--dealer').removeClass('poker__player--dealer');
      $('.poker__player--small-blind').removeClass('poker__player--small-blind');
      $('.poker__player--big-blind').removeClass('poker__player--big-blind');
      $('#Players_tmp').children().removeClass('poker__player--folded');

      $(".poker__card").removeClass(function (index, css) {
          return (css.match (/poker__card--\w{2,4}/g) || []).join(' ');
      });
    });

    socket.on('fold', function(player) {
      $('#Players').children().eq(player.seat).addClass('poker__players--folded');
      $('#Players_tmp').children().eq(player.seat).addClass('poker__player--folded');
      if (playerID == player.id) {
        $('button').prop('disabled', true);
      }
    });

    socket.on('turn', function(player) {
      $('.poker__players--active').removeClass('poker__players--active');
      $('#Players').children().eq(player.seat).addClass('poker__players--active');
      if(player.id == playerID) {
        $('button').prop('disabled', false);
      }
      else {
        $('button').prop('disabled', true);
      }
    });

    socket.on('pot', function(pot, tableBet, tableRoundBet, minRaise, player) {
      $('#Pot').text(pot);
      if(player) {
        $('#Players_tmp').children().eq(player.seat).children('.poker__player-chips').text(player.chips);

        if(player.id == playerID) {
          $('#Chips').text(player.chips);
        }
      }
      
      if(tableBet > bet) {
        call = tableBet - bet;
        $('#Check').text('Call ' + tableRoundBet + " (+" + call + ")");
      }

      minBet = tableRoundBet + minRaise;
      console.log('tableRoundBet:', tableRoundBet);
      if(tableRoundBet > 0) {
        $('#Bet').addClass('raise');
      }
      else{
        $('#Bet').removeClass('raise');
      }
      console.log(tableBet, tableRoundBet, minRaise, bet);

      updateBetButton(true);
    });

    socket.on('confirm bet', function(tableBet, tableRoundBet, player) {
      $('#Check').text('Check');
      $('#Chips').text(player.chips);
      $('#Players_tmp').children().eq(player.seat).children('.poker__player-chips').text(player.chips);
      $('#Bet_amount').prop('max', player.chips);
      bet = tableBet;
      roundBet = tableRoundBet
      call = 0;
      console.log('Your bet is now '+tableBet+'. You have '+player.chips+' chips.');
    });

    socket.on('winner', function(winners) {
      var textArray = [];
      $.each(winners, function(idx, player) {
        if (playerID == player.id) {
          textArray.unshift('You');
          $('#Chips').text(player.chips);
        }
        else {
          textArray.push(player.name);
        }

        $('#Players_tmp').children().eq(player.seat).children('.poker__player-chips').text(player.chips);
      });

      var text = textArray.join(', ');
      if(winners[0].hand) {
        text += ' - ' + winners[0].hand.handName;
      }
      $('#Winner').text(text);
      $('button').prop('disabled', true);
    });

    socket.on('player id', function(player) {
      playerID = player.id;
      $('#Player').text(player.name);
      $('#Chips').text(player.chips);
      $('#Bet_amount').prop('max', player.chips);
    });

    $(document).ready(function() {
      $('button').prop('disabled', true);
      $('#Check').on('click', function() {
        socket.emit('action', { action: 'check' });
      });
      $('#Fold').on('click', function() {
        socket.emit('action', { action: 'fold' });
      });
      $('#Bet').on('click', function() {
        var amount = parseInt($('#Bet_amount').val());
        socket.emit('action', { action: 'raise', amount: amount });
      });
      $('#Bet_amount').on('keyup change', function() {
        updateBetButton();
      });
      $('#All_in').on('click', function() {
        console.log(roundBet);
        $('#Bet_amount').val(roundBet + parseInt($('#Chips').text()));
        updateBetButton();
      });

      $(document).keypress(function(event) {
        switch(event.keyCode) {
          case 99:  // C
            $('#Check').click();
            break;
          case 102: // F
            $('#Fold').click();
            break;
          case 98:  // B
          case 114: // R
            $('#Bet').click();
            break;
        }
      });
      
      $(window).on('resize', reposition);
      reposition();
    });

    function updateBetButton(forced) {
      var $raise = $('#Bet');
      var $betInput = $('#Bet_amount');
      var raise = parseInt($betInput.val());
      var chips = parseInt($('#Chips').text());

      $betInput.prop('min', minBet);

      if(!raise) {
        raise = minBet;
      }
      else if(raise < minBet || forced) {
        raise = minBet;
      }
      else if(raise > chips + roundBet) {
        raise = parseInt(chips+roundBet);
      }

      if(forced) {
        $betInput.val(raise);
      }

      $raise.text(raise);
      //- if (call) {
        //- var total = call + raise;
        //- $raise.text(raise);
        //- $raise.text(total + " (" + call + " + " + raise + ")");
      //- }
      //- else{ 
        //- $raise.text(raise);
      //- }
    }

    function reposition() {
      var w = $('.poker__table').outerWidth();
      var h = $('.poker__table').outerHeight();

      $('.poker__player').each(function(idx) {
        if(idx != 1 && idx != 4) {
          return;
        }

        var matrix = $(this).css('transform').split(',');
        if(idx == 1) {
          matrix[4] = w/2;
        }
        else if(idx == 4) {
          matrix[4] = -w/2;
        }
        var transform = matrix.join(',');
        $(this).css('transform', transform);
      });
    }

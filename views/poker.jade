extends ./layout

block content
  div.row
    div.small-12.column
      h2.poker__table__name Table #[span.white #{table.name}]
      h3.poker__table__info
        small Buy-in: $#{table.blind*40}
        small Blinds: $#{table.blind/2} / $#{table.blind}
  div.row.poker__container
    div.medium-3.column
      div.poker__chat
        h4.poker__chat__title Table Chat
        ul#Chat_messages.poker__chat__messages
        div#Send_chat.poker__chat__compose(contenteditable='true' placeholder='Send a message')
    div.medium-9.column
      div.poker__table
        div.poker__table-middle
          div#Pot 0
          
          ul#Community_cards
            - for(var i=0; i<5; i++)
              li.poker__card.poker__card-community
          div#Winner
        ul#Players
          - for(var i=0; i<6; i++)
            li(class=['poker__player', 'poker__player--empty', 'poker__player--'+i])
              div.poker__card.poker__card-1
              div.poker__card.poker__card-2
              p.poker__player-name Seat Available
              p.poker__player-chips
              p.poker__player-bet

  div.poker__controls
    div.row
      div.small-6.column
        ul.button-group.poker__button-group
          li: button#Check.tiny.secondary Check
          li: button#Fold.tiny.secondary Fold
          li: button#Bet.tiny.secondary #{table.blind*2}
    div.row
      div.small-6.column
        ul.button-group.poker__button-group
          li: button#Spectate.tiny.secondary.no-disable Spectate
          li: button#All_in.tiny.secondary All In
          li: input(type="number", value='#{table.blind*2}', min='#{table.blind*2}')#Bet_amount
          
  div#Error_modal.reveal-modal.small(data-reveal)
    div.row
      div.small-12.column
        div#Error_message
    a.close-reveal-modal &#215;
    
  div#ProgressBar.hide.progress
    span#FoldBar.meter
  audio#TimeExpiring
    source(src="/sounds/ping.mp3" type="audio/mp3")

  script(type='text/javascript').
    var socket = io('/poker', { query: 'table=#{table.id}' });
    var playerID;
    var bet = 0;
    var roundBet = 0;
    var minBet = #{table.blind*2};
    var chips = 0;
    var timer;
    var expirationTimer;

    socket.on('chips', function(chips) {
      $('#Chips').text(chips);
    });

    socket.on('error', function(err){
      window.location.href = '/tables';
    });

    socket.on('customError', function(err){
      $('#Error_message').text(err.message);
      $('#Error_modal').foundation('reveal', 'open');
    });

    socket.on('receive message', function(msg) {
      var $el = $('<li></li>');
      $el.text(msg);
      $('#Chat_messages').append($el);
      $('#Chat_messages').scrollTop($('#Chat_messages').get(0).scrollHeight);
    });

    socket.on('player join', function(player, isYou) {
      var $player = $('#Players').children().eq(player.seat);
      $player.removeClass('poker__player--empty');

      if(player.id.length == 24) {
        var $playerLink = $("<a></a>");
        $playerLink.attr('href', '/profile/' + player.id);
        $playerLink.attr('target', '_blank');
        $playerLink.text(player.name);
        $player.children('.poker__player-name').html($playerLink);
      }
      else {
        $player.children('.poker__player-name').text(player.name);
      }

      $player.children('.poker__player-chips').text(player.chips);

      if(isYou) {
        $('.poker__container').addClass('poker__container--seated');
      }
    });

    socket.on('players', function(data) {
      var $players = $('#Players').children();
      $(data.players).each(function(idx, player) {
        var $player = $players.eq(idx);

        if(player) {
          $player.removeClass('poker__player--empty');

          if(player.id.length == 24) {
            var $playerLink = $("<a></a>");
            $playerLink.attr('href', '/profile/' + player.id);
            $playerLink.attr('target', '_blank');
            $playerLink.text(player.name);
            $player.children('.poker__player-name').html($playerLink);
          }
          else {
            $player.children('.poker__player-name').text(player.name);
          }

          $player.children('.poker__player-chips').text(player.chips);
          if(player.inHand) {
            $player.children('.poker__card-1').addClass('poker__card--back');
            $player.children('.poker__card-2').addClass('poker__card--back');
          }
        }
      });

      if(data.playing) {
        $('#Pot').text(data.pot);
        $.each(data.cards, function(idx, card) {
          $('#Community_cards').children().eq(idx).addClass('poker__card--' + card);
        });
        $players.eq(data.dealerSeat).addClass('poker__player--dealer');
        $players.eq(data.bigBlindSeat).addClass('poker__player--big-blind');
        $players.eq(data.smallBlindSeat).addClass('poker__player--small-blind');
      }
    });

    socket.on('players in hand', function(data) {
      $.each(data.players, function(id, player) {
        var $player = $('#Players').children().eq(player.seat);
        if(player.id == data.dealerID) {
          $player.addClass('poker__player--dealer');
        }
        if(player.id == data.smallBlindID) {
          $player.addClass('poker__player--small-blind');
        }
        if(player.id == data.bigBlindID) {
          $player.addClass('poker__player--big-blind');
        }

        if(player.id != playerID) {
          $player.children('.poker__card-1').addClass('poker__card--back');
          $player.children('.poker__card-2').addClass('poker__card--back');
        } else {
          $player.children('.poker__card-1').removeClass('poker__card--back');
          $player.children('.poker__card-2').removeClass('poker__card--back');
        }

        $player.children('.poker__player-chips').text(player.chips);
        $player.children('.poker__player-bet').text(player.bet);

        if(player.id == playerID) {
          chips = player.chips;
        }
      });

      $('#Pot').text(data.pot);

      if(playerID == data.smallBlindID) {
        bet = data.blind/2;
      }
      else if(playerID == data.bigBlindID) {
        bet = data.blind;
      }

      roundBet = bet;
      var tableBet = data.blind;
      var tableRoundBet = data.blind;
      var minRaise = data.blind;

      //- From 'pot' function (unmodified)
      if(tableBet > bet) {
        var call = tableBet - bet;
        if(call > chips) {
          $('#Check').text('All In (+' + chips + ')');
        }
        else {
          $('#Check').text('Call ' + tableRoundBet + ' (+' + call + ')');
        }
      }

      minBet = tableRoundBet + minRaise;
      if(tableRoundBet > 0) {
        $('#Bet').addClass('raise');
      }
      else{
        $('#Bet').removeClass('raise');
      }
      updateBetButton(true);
    });

    socket.on('player leave', function(seat, isYou) {
      var $player = $('#Players').children().eq(seat);
      $player.children('.poker__player-name').text('Seat Available');
      $player.addClass('poker__player--empty');

      if(isYou) {
        $('.poker__container').removeClass('poker__container--seated');
      }
    });

    socket.on('player cards', function(cards, seat) {
      var $player = $('#Players').children().eq(seat);
      $player.children('.poker__card-1').addClass('poker__card poker__card--' + cards[0]);
      $player.children('.poker__card-2').addClass('poker__card poker__card--' + cards[1]);
    });

    socket.on('community cards', function(cards) {
      $.each(cards, function(idx, card) {
        $('#Community_cards').children().eq(idx).addClass('poker__card--' + card);
      });

      roundBet = 0;
    });

    socket.on('reset', function() {
      $('#Winner').text('');
      $('#Pot').text(0);
      $('#Check').text('Check');
      $('#Bet').removeClass('raise');
      $('.poker__player-bet').text('');
      bet = 0;
      roundBet = 0;
      minBet = #{table.blind*2};
      updateBetButton(true);
      $('button:not(.no-disable)').prop('disabled', true);
      $('#Bet_amount').prop('disabled', true);

      $('.poker__player--winner').removeClass('poker__player--winner');
      $('.poker__player--dealer').removeClass('poker__player--dealer');
      $('.poker__player--small-blind').removeClass('poker__player--small-blind');
      $('.poker__player--big-blind').removeClass('poker__player--big-blind');
      $('#Players').children().removeClass('poker__player--folded');

      $(".poker__card").removeClass(function (index, css) {
          return (css.match (/poker__card--\w{2,4}/g) || []).join(' ');
      });
    });

    socket.on('fold', function(player) {
      $('#Players').children().eq(player.seat).addClass('poker__player--folded');
      if (playerID == player.id) {
        $('button:not(.no-disable)').prop('disabled', true);
        $('#Bet_amount').prop('disabled', true);
      }
    });

    socket.on('turn', function(player, resetBets) {
      $('.poker__players--active').removeClass('poker__players--active');
      if(player.id == playerID) {
        $('button:not(.no-disable)').prop('disabled', false);
        $('#Bet_amount').prop('disabled', false);
      }
      else {
        $('button:not(.no-disable)').prop('disabled', true);
        $('#Bet_amount').prop('disabled', true);
      }

      if(resetBets) {
        $('.poker__player-bet').text('');
      }

      $player = $('#Players').children().eq(player.seat);
      $('#ProgressBar').detach().appendTo($player);
      clearTimeout(timer);
      clearTimeout(expirationTimer);
      $('#ProgressBar').show();
      $('#FoldBar').removeClass('animate');  // Restart the animation
      $('#FoldBar').addClass('animate');
      
      timer = setTimeout(function() { 
        if(player.id == playerID) {
          socket.emit('action', { action: 'fold' });
          socket.emit('spectate');
        }
      }, 30000);
      expirationTimer = setTimeout(function() { 
        if(player.id == playerID) {
          var audio = $("#TimeExpiring")[0]; 
          audio.play();
        }
      }, 20000);
    });

    socket.on('pot', function(pot, tableBet, tableRoundBet, minRaise, player) {
      $('#Pot').text(pot);
      if(player) {
        var $player = $('#Players').children().eq(player.seat);
        $player.children('.poker__player-chips').text(player.chips);
        $player.children('.poker__player-bet').text(tableRoundBet);
        if(player.id == playerID) {
          chips = player.chips;
        }
      }
      
      if(tableBet > bet) {
        var call = tableBet - bet;
        if(call > chips) {
          $('#Check').text('All In (+' + chips + ')');
        }
        else {
          $('#Check').text('Call ' + tableRoundBet + ' (+' + call + ')');
        }
      }

      minBet = tableRoundBet + minRaise;
      if(tableRoundBet > 0) {
        $('#Bet').addClass('raise');
      }
      else{
        $('#Bet').removeClass('raise');
      }

      updateBetButton(true);
    });

    socket.on('confirm bet', function(tableBet, tableRoundBet, player) {
      $('#Check').text('Check');
      $('#Players').children().eq(player.seat).children('.poker__player-chips').text(player.chips);
      $('#Bet_amount').prop('max', player.chips);
      chips = player.chips;
      bet = tableBet;
      roundBet = tableRoundBet
    });

    socket.on('winner', function(handPlayers, winners) {
      clearTimeout(timer);
      clearTimeout(expirationTimer);
      $('#ProgressBar').hide();
      var textArray = [];
      var bestHand = null;
      $.each(handPlayers, function(idx, player) {
        if(!player) {
          return true;  // This is the equivalent of continue
        }

        if(winners.indexOf(player.id) != -1) {
          bestHand = player.hand;
          if (playerID == player.id) {
            textArray.unshift('You');
            chips = player.chips;
          }
          else {
            textArray.push(player.name);
          }

          $('#Players').children().eq(player.seat).addClass('poker__player--winner');
        }

        if (playerID == player.id) {
          chips = player.chips;
        }
        $('#Players').children().eq(player.seat).children('.poker__player-chips').text(player.chips);

        if(handPlayers.length > 1) {
          var $cards = $('#Players').children().eq(player.seat).children('.poker__card');
          $cards.removeClass('poker__card--back');
          $cards.eq(0).addClass('poker__card--' + player.cards[0]);
          $cards.eq(1).addClass('poker__card--' + player.cards[1]);
        }
      });

      var text = textArray.join(', ');
      if(bestHand) {
        text += ' - ' + bestHand.handName.charAt(0).toUpperCase() + bestHand.handName.slice(1);
      }

      if(textArray.length > 1) {
        text = 'Winners: ' + text;
      }
      else {
        text = 'Winner: ' + text;
      }
      $('#Winner').text(text);

      var $el = $('<li></li>');
      $el.text('[' + text + ']');
      $('#Chat_messages').append($el);
      $('#Chat_messages').scrollTop($('#Chat_messages').get(0).scrollHeight);

      $('button:not(.no-disable)').prop('disabled', true);
      $('#Bet_amount').prop('disabled', true);
    });

    socket.on('player id', function(player) {
      playerID = player.id;
      $('#Bet_amount').prop('max', player.chips);
      chips = player.chips;
    });

    $(document).ready(function() {
      var quick = parseInt('#{query.quick}');
      if(!isNaN(quick)) {
        socket.emit('sit', quick);
      }

      window.history.pushState('', 'PokerDots', '#{path}');

      $('button:not(.no-disable)').prop('disabled', true);
      $('#Bet_amount').prop('disabled', true);
      $('#Check').on('click', function() {
        socket.emit('action', { action: 'check' });
      });
      $('#Fold').on('click', function() {
        socket.emit('action', { action: 'fold' });
      });
      $('#Bet').on('click', function() {
        var amount = parseInt($('#Bet_amount').val());
        socket.emit('action', { action: 'raise', amount: amount });
      });
      $('#Bet_amount').on('keyup change', function() {
        updateBetButton();
      });
      $('#All_in').on('click', function() {
        $('#Bet_amount').val(roundBet + chips);
        updateBetButton();
      });
      $('.poker__player').on('click', function() {
        if($(this).hasClass('poker__player--empty')) {
          socket.emit('sit', $(this).index());
        }
      });
      $('#Spectate').on('click', function() {
        socket.emit('spectate');
      });
      $('#Send_chat').on('keypress', function(event) {
        event.stopPropagation();
        if(event.keyCode == 13) {
          event.preventDefault();
          var msg = $(this).text();
          $(this).text('');
          if(msg.length > 0) {
            socket.emit('send message', msg);
          }
        }
      });

      $(document).on('keypress', function(event) {
        switch(event.keyCode) {
          case 99:  // C
            $('#Check').click();
            break;
          //- case 102: // F
          //-   $('#Fold').click();
          //-   break;
          case 98:  // B
          case 114: // R
            $('#Bet').click();
            break;
        }
      });
    });

    function updateBetButton(forced) {
      var $raise = $('#Bet');
      var $betInput = $('#Bet_amount');
      var raise = parseInt($betInput.val());

      $betInput.prop('min', minBet);

      if(!raise) {
        raise = minBet;
      }
      else if(raise < minBet || forced) {
        raise = minBet;
      }
      else if(raise > chips + roundBet) {
        raise = parseInt(chips+roundBet);
      }

      if(forced) {
        $betInput.val(raise);
      }

      $raise.text(raise);
    }

extends ./layout

block content
  div.row.poker__container
    div.poker__table
      div.poker__table-inner
      div.poker__table-middle
        div#Pot 0
        
        ul#Community_cards
          - for(var i=0; i<5; i++)
            li.poker__card.poker__card-community
        div#Winner
      ul#Players
        - for(var i=0; i<6; i++)
          li(class=['poker__player', 'poker__player--empty', 'poker__player--'+i])
            div.poker__card.poker__card-1
            div.poker__card.poker__card-2
            p.poker__player-name Seat Available
            p.poker__player-chips

  div.poker__controls
    div.row
      div.medium-6.column
        ul.button-group
          li: button#Check.button.small Check
          li: button#Fold.button.small Fold
          li: button#Bet.button.small 10
      div.medium-4.column.end
        div.row.collapse
          div.small-7.column
            input(type="number", value=10, min=10)#Bet_amount
          div.small-5.column
            button#All_in.button.postfix All In

    div.row
      div.small-12.column
        button#Spectate.button.small.no-disable Spectate

  div.row
    div.small-6.column
      h1 #{table.name}
      h2 #{table.blind/2} / #{table.blind}
      h3 Pot
      p#Pot_tmp 0
      h3 Players
      ol#Players_tmp
        - for(var i=0; i<6; i++)
          li Empty
      h3 Winner
        p#Winner_tmp No one
          
    div.small-6.column
      h1#Player
      h3 Chips
        p#Table_chips
      h3 Community Cards
        p#Community_cards_tmp None
      h3 Your Cards
      p#Player_cards None

  div#Error_modal.reveal-modal.small(data-reveal)
    div.row
      div.small-12.column
        div#Error_message
    a.close-reveal-modal &#215;
    
  div#ProgressBar
    div.progress
      span#FoldBar.meter(style="width:100%")
    

  script(type='text/javascript').
    var socket = io('/poker', { query: 'table=#{table.id}' });
    var playerID;
    var bet = 0;
    var roundBet = 0;
    var minBet = 10;
    var chips = 0;
    var timeRemaining = 10;
    var timer;

    socket.on('chips', function(chips) {
      $('#Chips').text('$'+chips);
    });

    socket.on('error', function(err){
      window.location.href = '/tables';
    });

    socket.on('customError', function(err){
      $('#Error_message').text(err.message);
      $('#Error_modal').foundation('reveal', 'open');
    });

    socket.on('player join', function(player, isYou) {
      $playerEl = $('#Players_tmp').children().eq(player.seat);
      $playerEl.text(player.name);
      $playerEl.addClass('poker__players--folded');

      var $player = $('#Players').children().eq(player.seat);
      $player.removeClass('poker__player--empty');
      $player.children('.poker__player-name').text(player.name);
      $player.children('.poker__player-chips').text(player.chips);

      if(isYou) {
        $('.poker__container').addClass('poker__container--seated');
      }
    });

    socket.on('players', function(data) {
      var $players = $('#Players').children();
      $(data.players).each(function(idx, player) {
        var $player = $players.eq(idx);
        var $playerEl = $('#Players_tmp').children().eq(idx);

        if(player) {
          $player.removeClass('poker__player--empty');
          $player.children('.poker__player-name').text(player.name);
          $player.children('.poker__player-chips').text(player.chips);
          if(player.inHand) {
            $player.children('.poker__card-1').addClass('poker__card--back');
            $player.children('.poker__card-2').addClass('poker__card--back');
          }

          $playerEl.text(player.name);
          if (!player.inHand) {
            $playerEl.addClass('poker__players--folded');
          }
        }
        else {
          $playerEl.addClass('poker__players--folded');
        }
      });

      if(data.playing) {
        $('#Pot').text(data.pot);
        $.each(data.cards, function(idx, card) {
          $('#Community_cards').children().eq(idx).addClass('poker__card--' + card);
        });
        $players.eq(data.dealerSeat).addClass('poker__player--dealer');
        $players.eq(data.bigBlindSeat).addClass('poker__player--big-blind');
        $players.eq(data.smallBlindSeat).addClass('poker__player--small-blind');
      }
    });

    socket.on('players in hand', function(data) {
      $.each(data.players, function(id, player) {
        var $playerEl = $('#Players_tmp').children().eq(player.seat);
        var $player = $('#Players').children().eq(player.seat);
        $playerEl.removeClass('poker__players--folded');
        if(player.id == data.dealerID) {
          $playerEl.addClass('poker__players--dealer');
          $player.addClass('poker__player--dealer');
        }
        if(player.id == data.smallBlindID) {
          $playerEl.addClass('poker__players--small-blind');
          $player.addClass('poker__player--small-blind');
        }
        if(player.id == data.bigBlindID) {
          $playerEl.addClass('poker__players--big-blind');
          $player.addClass('poker__player--big-blind');
        }

        if(player.id != playerID) {
          $player.children('.poker__card-1').addClass('poker__card--back');
          $player.children('.poker__card-2').addClass('poker__card--back');
        } else {
          $player.children('.poker__card-1').removeClass('poker__card--back');
          $player.children('.poker__card-2').removeClass('poker__card--back');
        }

        $player.children('.poker__player-chips').text(player.chips);
        if(player.id == playerID) {
          chips = player.chips;
          $('#Table_chips').text(player.chips);
        }
      });

      $('#Pot').text(data.pot);
      $('#Pot_tmp').text(data.pot);

      if(playerID == data.smallBlindID) {
        bet = data.blind/2;
      }
      else if(playerID == data.bigBlindID) {
        bet = data.blind;
      }

      roundBet = bet;
      var tableBet = data.blind;
      var tableRoundBet = data.blind;
      var minRaise = data.blind;

      //- From 'pot' function (unmodified)
      if(tableBet > bet) {
        var call = tableBet - bet;
        if(call > chips) {
          $('#Check').text('All In (+' + chips + ')');
        }
        else {
          $('#Check').text('Call ' + tableBet + ' (+' + call + ')');
        }
      }

      minBet = tableRoundBet + minRaise;
      if(tableRoundBet > 0) {
        $('#Bet').addClass('raise');
      }
      else{
        $('#Bet').removeClass('raise');
      }
      updateBetButton(true);
    });

    socket.on('player leave', function(seat, isYou) {
      var $playerEl = $('#Players_tmp').children().eq(seat);
      $playerEl.text('Empty');
      //- $playerEl.addClass('poker__players--folded');

      var $player = $('#Players').children().eq(seat);
      $player.children('.poker__player-name').text('Seat Available');
      $player.addClass('poker__player--empty');

      if(isYou) {
        $('.poker__container').removeClass('poker__container--seated');
      }
    });

    socket.on('player cards', function(cards, seat) {
      $('#Player_cards').text(cards.join(' '));

      var $player = $('#Players').children().eq(seat);
      $player.children('.poker__card-1').addClass('poker__card poker__card--' + cards[0]);
      $player.children('.poker__card-2').addClass('poker__card poker__card--' + cards[1]);
    });

    socket.on('community cards', function(cards) {
      $('#Community_cards_tmp').text(cards.join(' '));
      $.each(cards, function(idx, card) {
        $('#Community_cards').children().eq(idx).addClass('poker__card--' + card);
      });

      roundBet = 0;
    });

    socket.on('reset', function() {
      $('#Player_cards').text('None');
      $('#Community_cards_tmp').text('None');
      $('#Winner').text('');
      $('#Winner_tmp').text('No one');
      $('#Pot').text(0);
      $('#Pot_tmp').text(0);
      $('#Check').text('Check');
      $('#Bet').removeClass('raise');
      bet = 0;
      roundBet = 0;
      minBet = 10;
      updateBetButton(true);
      $('button:not(.no-disable)').prop('disabled', true);
      $('#Players_tmp').children().removeClass();  // Remove all classes
      $('#Players_tmp').children().addClass('poker__players--folded');

      $('.poker__player--winner').removeClass('poker__player--winner');
      $('.poker__player--dealer').removeClass('poker__player--dealer');
      $('.poker__player--small-blind').removeClass('poker__player--small-blind');
      $('.poker__player--big-blind').removeClass('poker__player--big-blind');
      $('#Players').children().removeClass('poker__player--folded');

      $(".poker__card").removeClass(function (index, css) {
          return (css.match (/poker__card--\w{2,4}/g) || []).join(' ');
      });
    });

    socket.on('fold', function(player) {
      $('#Players_tmp').children().eq(player.seat).addClass('poker__players--folded');
      $('#Players').children().eq(player.seat).addClass('poker__player--folded');
      if (playerID == player.id) {
        $('button:not(.no-disable)').prop('disabled', true);
      }
    });

    socket.on('turn', function(player) {
      clearInterval(timer);
      var percent = timeRemaining/30*100;
      $('#FoldBar').css('width', '100%');
      
      $('.poker__players--active').removeClass('poker__players--active');
      $('#Players_tmp').children().eq(player.seat).addClass('poker__players--active');
      if(player.id == playerID) {
        $('button:not(.no-disable)').prop('disabled', false);
        
      }
      else {
        $('button:not(.no-disable)').prop('disabled', true);
      }
      $player = $('#Players').children().eq(player.seat);
      $('#ProgressBar').detach().appendTo($player);
      
      
      timeRemaining = 30;
      
      timer = setInterval(function() { 
        timeRemaining--;
        console.log("time: " + timeRemaining);
        $('#FoldTimer').text(timeRemaining);
        var percent = timeRemaining/30*100;
        $('#FoldBar').css('width', percent+'%');
        if (timeRemaining <= 0){
          if(player.id == playerID) {
            socket.emit('action', { action: 'fold' });
            socket.emit('spectate');
            clearInterval(timer);
          }
        }
      }, 1000);
    });

    socket.on('pot', function(pot, tableBet, tableRoundBet, minRaise, player) {
      $('#Pot').text(pot);
      $('#Pot_tmp').text(pot);
      if(player) {
        $('#Players').children().eq(player.seat).children('.poker__player-chips').text(player.chips);

        if(player.id == playerID) {
          chips = player.chips;
          $('#Table_chips').text(player.chips);
        }
      }
      
      if(tableBet > bet) {
        var call = tableBet - bet;
        if(call > chips) {
          $('#Check').text('All In (+' + chips + ')');
        }
        else {
          $('#Check').text('Call ' + tableBet + ' (+' + call + ')');
        }
      }

      minBet = tableRoundBet + minRaise;
      console.log('tableRoundBet:', tableRoundBet);
      if(tableRoundBet > 0) {
        $('#Bet').addClass('raise');
      }
      else{
        $('#Bet').removeClass('raise');
      }
      console.log(tableBet, tableRoundBet, minRaise, bet);

      updateBetButton(true);
    });

    socket.on('confirm bet', function(tableBet, tableRoundBet, player) {
      $('#Check').text('Check');
      $('#Table_chips').text(player.chips);
      $('#Players').children().eq(player.seat).children('.poker__player-chips').text(player.chips);
      $('#Bet_amount').prop('max', player.chips);
      chips = player.chips;
      bet = tableBet;
      roundBet = tableRoundBet
      console.log('Your bet is now '+tableBet+'. You have '+player.chips+' chips.');
    });

    socket.on('winner', function(handPlayers, winners) {
      var textArray = [];
      var bestHand = null;
      $.each(handPlayers, function(idx, player) {
        if(!player) {
          return true;  // This is the equivalent of continue
        }
        
        $player = $('#Players').children().eq(player.seat);
        $('#ProgressBar').detach();

        if(winners.indexOf(player.id) != -1) {
          bestHand = player.hand;
          if (playerID == player.id) {
            textArray.unshift('You');
            $('#Table_chips').text(player.chips);
            chips = player.chips;
          }
          else {
            textArray.push(player.name);
          }

          $('#Players').children().eq(player.seat).addClass('poker__player--winner');
        }

        if (playerID == player.id) {
          $('#Table_chips').text(player.chips);
          chips = player.chips;
        }
        $('#Players').children().eq(player.seat).children('.poker__player-chips').text(player.chips);

        if(handPlayers.length > 1) {
          var $cards = $('#Players').children().eq(player.seat).children('.poker__card');
          $cards.removeClass('poker__card--back');
          $cards.eq(0).addClass('poker__card--' + player.cards[0]);
          $cards.eq(1).addClass('poker__card--' + player.cards[1]);
        }
      });

      var text = textArray.join(', ');
      if(bestHand) {
        text += ' - ' + bestHand.handName;
      }
      $('#Winner_tmp').text(text);

      if(textArray.length > 1) {
        text = 'Winners:' + text;
      }
      else {
        text = 'Winner: ' + text;
      }
      $('#Winner').text(text);

      $('button:not(.no-disable)').prop('disabled', true);
    });

    socket.on('player id', function(player) {
      playerID = player.id;
      $('#Player').text(player.name);
      $('#Table_chips').text(player.chips);
      $('#Bet_amount').prop('max', player.chips);
      chips = player.chips;
    });

    $(document).ready(function() {
      var quick = '#{query.quick}';
      if(quick) {
        var seat = $('.poker__player.poker__player--empty').eq(0).index();
          socket.emit('sit', seat);
      }
      $('button:not(.no-disable)').prop('disabled', true);
      $('#Check').on('click', function() {
        socket.emit('action', { action: 'check' });
      });
      $('#Fold').on('click', function() {
        socket.emit('action', { action: 'fold' });
      });
      $('#Bet').on('click', function() {
        var amount = parseInt($('#Bet_amount').val());
        socket.emit('action', { action: 'raise', amount: amount });
      });
      $('#Bet_amount').on('keyup change', function() {
        updateBetButton();
      });
      $('#All_in').on('click', function() {
        $('#Bet_amount').val(roundBet + chips);
        updateBetButton();
      });
      $('.poker__player').on('click', function() {
        if($(this).hasClass('poker__player--empty')) {
          socket.emit('sit', $(this).index());
        }
      });
      $('#Spectate').on('click', function() {
        socket.emit('spectate');
      });

      $(document).keypress(function(event) {
        switch(event.keyCode) {
          case 99:  // C
            $('#Check').click();
            break;
          case 102: // F
            $('#Fold').click();
            break;
          case 98:  // B
          case 114: // R
            $('#Bet').click();
            break;
        }
      });
      
      $(window).on('resize', reposition);
      reposition();
    });

    function updateBetButton(forced) {
      var $raise = $('#Bet');
      var $betInput = $('#Bet_amount');
      var raise = parseInt($betInput.val());

      $betInput.prop('min', minBet);

      if(!raise) {
        raise = minBet;
      }
      else if(raise < minBet || forced) {
        raise = minBet;
      }
      else if(raise > chips + roundBet) {
        raise = parseInt(chips+roundBet);
      }

      if(forced) {
        $betInput.val(raise);
      }

      $raise.text(raise);
    }

    function reposition() {
      var w = $('.poker__table').outerWidth();
      var h = $('.poker__table').outerHeight();

      $('.poker__player').each(function(idx) {
        if(idx != 1 && idx != 4) {
          return;
        }

        var matrix = $(this).css('transform').split(',');
        if(idx == 1) {
          matrix[4] = w/2;
        }
        else if(idx == 4) {
          matrix[4] = -w/2;
        }
        var transform = matrix.join(',');
        $(this).css('transform', transform);
      });
    }

extends ./layout

block content
  div.row
    div.small-12.column
      if !profile
        h1 This profile couldn't be found
      else
        h1 #{profile.username}
          small.profile__balance $#[span#Balance #{profile.chips}]
        if errorFlash.length
          div.alert-box.alert #{errorFlash}

        if !profile._id && !loggedIn && isYou
          div
            button#Topup.small Top up chips to $2000

        if profile._id
          div.row
            div.medium-8.column
              container#Graph
            div.medium-4.column
              dl
                dt Joined
                dd #{moment(profile._id.getTimestamp()).format('DD MMMM YYYY')}
                dt Largest Pot Won
                dd $#{profile.largestWin}
                dt Hands Played
                dd #{profile.handsPlayed}
                dt Site Ranking
                dd ##{ranking}
              if isYou
                div
                  button#Topup.small Top up chips to $2000
                div
                  a.button.small(href="/account/settings") Update Details

        if loggedIn
          if isYou
            div.row
              div.medium-6.column
                h2 Friends
                ul#Friends.account__friends
                  if friends.length == 0
                    li#Friends_empty: a(href='/users/')
                  else
                    each friend in friends
                      li.account__friend__handle
                        a(href='/profile/'+friend._id._id).button.split.tiny #{friend._id.username}
                          span(data-dropdown='Drop_#{friend._id._id}')
                        ul.f-dropdown(id='Drop_#{friend._id._id}')
                          li: a.account__friend-action(data-action='unfriend' data-friend-id='#{friend._id._id}') Unfriend
              div.medium-6.column
                h2 Friend Requests
                ul.account__friend-request
                  each friend in incomingFriends
                    li.account__friend__handle
                      a.button.split.tiny(href='/profile/'+friend._id._id) #{friend._id.username}
                        span(data-dropdown='Drop_#{friend._id._id}')
                      ul.f-dropdown(id='Drop_#{friend._id._id}')
                        li: a.account__friend-action(data-action='accept' data-friend-id='#{friend._id._id}') Accept
                        li: a.account__friend-action(data-action='ignore' data-friend-id='#{friend._id._id}') Ignore
                        li: a.account__friend-action(data-action='block' data-friend-id='#{friend._id._id}') Block

        if loggedIn && !isYou
          include ./account/friends.jade
    if isYou
      div.small-12.column
        ul
        each hand in hands
          | your hand: 
          li(class = 'poker__card poker__card-community poker__card--#{hand.hand1}')
          li(class = 'poker__card poker__card-community poker__card--#{hand.hand2}')
          p
          |community cards: 
          li(class = 'poker__card poker__card-community poker__card--#{hand.community1}')
          li(class = 'poker__card poker__card-community poker__card--#{hand.community2}')
          li(class = 'poker__card poker__card-community poker__card--#{hand.community3}')
          li(class = 'poker__card poker__card-community poker__card--#{hand.community4}')
          li(class = 'poker__card poker__card-community poker__card--#{hand.community5}')
          p
          | result: #{hand.result}
          | pot: #{hand.pot}
          p
          | winners hand: 
          p
          li(class = 'poker__card poker__card-community poker__card--#{hand.winningHand1}')
          li(class = 'poker__card poker__card-community poker__card--#{hand.winningHand2}')
          p
  if isYou
    script(type='text/javascript').
      $(document).ready(function() {
        $('#Topup').on('click', function() {
          $.ajax({
            type: 'POST',
            url: '/account/topup-chips',
            data: {
              element: document.getElementById('sessionID')
            }
          })
          .done(function(data) {
            $('#Balance').text(data.chips);
            $('#Chips').text(data.chips);
          });
        });
      });

  if loggedIn
    script(type='text/javascript').
      $(document).ready(function() {
        $('.account__friend-action').on('click', function() {
          var action = $(this).data('action');
          var friendID = $(this).data('friend-id');
          var $el = $(this);

          $.ajax({
            type: 'POST',
            url: '/account/friend',
            data: {
                friendID: friendID
              , action: action
            }
          })
          .done(function() {
            switch(action) {
              case 'accept':
                $('#Friends_empty').remove();
                $el.closest('ul').prev().children('span').trigger('click');
                $el.closest('.account__friend__handle').detach().appendTo('#Friends');
                $el.parent().siblings().remove();
                $el.text('Unfriend');
                $el.data('action', 'unfriend');
                break;
              case 'ignore':
                $el.closest('.account__friend__handle').remove();
                break;
              case 'block':
                $el.closest('.account__friend__handle').remove();
                break;
              case 'unfriend':
                $el.closest('.account__friend__handle').remove();
                if($('#Friends').children().length == 0) {
                  $('#Friends').append('<li id="Friends_empty"><a href="/users"></a></li>');
                }
                break;
            }
          })
        });

        Highcharts.setOptions({
            lang: {
              thousandsSep: ','
            }
        });

        $('#Graph').highcharts({
          chart: {},
          credits: {
            enabled: false
          },
          exporting: {
            enabled: false
          },
          title: {
            text: 'Lifetime Profitability'
          },
          yAxis: {
            title: {
              text: 'Profitability'
            }
          },
          xAxis: {
            type: 'datetime',
            dateTimeLabelFormats: {
              second: '%b-%d<br/>%H:%M:%S',
              minute: '%b-%d<br/>%H:%M',
              hour: '%b-%d<br/>%H:%M',
              day: '%b-%d',
              week: '%Y<br/>%b-%d',
              month: '%b %Y',
              year: '%Y'
            },
            title: {
              text: 'Date Played'
            }
          },
          legend: {
            enabled: false
          },
          tooltip: {
            valuePrefix: '$',
            xDateFormat: '%b %d %Y %H:%M'
          },
          series: [{
            name: 'Profitability',
            data: []
          }]
        });
        var chipTracker = JSON.parse('!{chipTracker}'); 
        var mySeries = [];
        // offset in minutes converted to milliseconds
        var offset = new Date().getTimezoneOffset() * 60000;
        for (var i = 0; i < chipTracker.length; i++) {
          var epochDate = Date.parse(chipTracker[i].date);
          epochDate -= offset;
          mySeries.push([epochDate, chipTracker[i].change]);
        }
        var chart = $('#Graph').highcharts();
        chart.series[0].setData(mySeries); 
      });
